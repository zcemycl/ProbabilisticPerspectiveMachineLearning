function [x,y]=StudentFit(data)
% I basically filter out some multivariate stuff
model.mu = []; model.sigma = []; modeldof = []; 
dof0 = [];

end

%% Helper Functions
% Given settings of mu and sigma, find the best settings
% of dof to minimize the negative log likelihood using 
% 1D linesearch
function dof = estimateDofNLL(model, X)
mu = model.mu;
Sigma = model.Sigma;
nllfn = @(v) -sum(studentLogprob(studentCreate(mu, Sigma, v), X));
dofMax = 1000; dofMin = 0.1;
dof = fminbnd(nllfn, dofMin, dofMax);
end

% Log probability of student distribution
function logp = studentLogprob(arg1,arg2)
mu    = arg1.mu; Sigma = arg1.Sigma; nu    = arg1.dof;
X     = arg2;
d = size(Sigma, 1);
X = X(:) - mu(:);

mahal = sum((X/Sigma).*X,2);
logc = gammaln(nu/2 + d/2) - gammaln(nu/2) - 0.5*logdet(Sigma) ...
    - (d/2)*log(nu) - (d/2)*log(pi);
logp = logc  -(nu+d)/2*log1p(mahal/nu);
end

function model  = studentCreate(mu, Sigma, dof)
model = structure(mu, Sigma, dof);
model.ndims = length(mu); 
model.modelType = 'student';
end

function model = init(model)
model.mu = randn;
model.Sigma = diag(rand);
model.dof = ceil(5*rand());
end

function [ess, loglik] = estep(model, X, useSpeedup)
%% Compute the expected sufficient statistics
loglik   = sum(studentLogprob(model, X));
mu       = model.mu;
Sigma    = model.Sigma;
dof      = model.dof;
[N, D]   = size(X);
%SigmaInv = inv(Sigma);
XC = bsxfun(@minus,X,rowvec(mu));
delta =  sum((XC/Sigma).*XC,2);
w = (dof+D) ./ (dof+delta);      % E[tau(i)]
if useSpeedup % see McLachlan and Krishnan eqn 5.97-5.98
    aopt = 1/(dof+D);
    w = (1./det(Sigma))^aopt * w; % det(SigmaInv) == 1/det(Sigma)
end
Xw = X .* repmat(w(:), 1, D);
ess.Sw  = sum(w);
ess.SX  = sum(Xw, 1)'; % sum_i u(i) xi, column vector
ess.SXX = Xw'*X;       % sum_i u(i) xi xi'
if useSpeedup
    ess.denom = ess.Sw;
else
    ess.denom = N;

end